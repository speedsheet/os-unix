# <#>Unix<><> SpeedSheet
<b>Find what you need, faster.<>

Covers Unix command line commands.



# Files

### Permission Notation

<cb>drwxrwxrwx+<>

<c>d ... ... ...<>	Directory
<c>. rwx ... ...<>	Owner
<c>. ... rwx ...<>	Group
<c>. ... ... rwx<>	Everyone
<c>. ... ... ... +<>	Additional Permissions

r	Read
w	Write
x	Execute



### File Mode Notation

<cb><v>uga<><>

<c><v>u<><>	User Value
<c><v>g<><>	Group Value
<c><v>a<><>	All Value

1	Execute
2	Write
4	Read


Example:

<card>User	Read, Write, Execute	7
Group	Read, Execute		5
All		Read Only			4<>

Mode:

<cb>754<>


Example:

<card>User	Read, Execute			5
Group	Read, Execute		5
All		No Access			0<>

Mode:

<cb>550<>



# Exit Codes



### OK

OK Exit Code:

<cb>0<>
@
@ 0



### Error

Recommended Error Exit Codes:

<cb>1-127<>

General Error Code:

<cb>1<>

Invalid Command Line Options Error Code:

<cb>2<>


These arr guideline more than rule.
@
@ 1, 2



# Cron
@
@ App


## Cron - Commands


### Cron - Jobs - List All

<cb>crontab -l<>



### Cron - Jobs - Edit Existing Jobs

<cb>crontab -e<>



### Cron - Jobs - Remove

<cb>crontab -r<>



### Cron - Schedule Job

<cb>crontab <v>cron_job_file<><>

Schedule jobs in cron from cron job settings file.



## Cron - Job File Format

Each line refers to one job. Add as many lines to the file as you need to schedule your jobs.

Line Format:

<cb><v>min<> <v>hour<> <v>day<> <v>month<> <v>day_of_week<> <v>shell_command<><>

<c>min<>				<c><s>[<> 0 - 59 <s>|<> * <s>]<><>
<c>hour<>			<c><s>[<> 0 - 23 <s>|<> * <s>]<><>
<c>day<>				<c><s>[<> 1 - 31 <s>|<> * <s>]<><>
<c>month<>			<c><s>[<> 1 - 12 <s>|<> * <s>]<><>
<c>day_of_week<>		<c><s>[<> 0 - 6  <s>|<> * <s>]<><>		0 = Sunday

<c><v>shell_command<><>	The Command to Execute

<c>*<>				All Times (* is a wild card)


<b><m>Check and Format:<><>


Item Time Format	Second Minute Hour Day-of-Month Month Day-of-Week

	Each: Can be number, number range, number list, wild card
	Each: Number:	5
	Each: Number range:	2-5
	Each: Number list:	2,3,7
	Each: Wild card (all):	*
	Each: Unknown (day of week, etc.):	?			// Not supported by all cron implementations.

	Day of Month:		1-31
	Day of Week:		0-6 or SUN-SAT
					L (last of month)			// Ex: 6L	Last Friday of month
		# (specifies which week of month)	// Ex: 6#2	2nd Friday of every month

Logging Response

	To Null				??
	To Log File			&> /tmp/logs/cron.logs 

Example:

0 17 * * 5 somescript.sh		Runs somescript.sh at 5 PM every Friday.
1 0/2 * * * somescript.sh		Runs somescript.sh every 2 hours starting at 1 minute past midnight every night.



## Cron - How To


### Cron Service - Test If Up

<cb>ps -ef | grep cron | grep -v grep<>



### Files And Directories

Log Directories:

<cb>/var/log/cron<>

<cb>/var/log/syslog<>


<c>/var/log/cron<>		Directory for cron logs (true for AWS Linux).

<c>/var/log/syslog<>		May be a file.




# How To / Commands


### Alias

<cb>alias <v>name<>=<v>command<>

Multiple Commands:

<cb>alias <v>name<>='<v>command; command;...<>'<>



Example:

<cb>alias home="cd '$HOME'"<>



### Bash

<cb>/bin/bash<>



### Bash - Version

Long Format:

<cb>bash --version<>

Something Like '4.2.8':

<cb>echo ${BASH_VERSION%%[^0-9.]*}<>

Something Like '4.2.8(1)-release:

<cb>echo $BASH_VERSION<>



### Block Devices - List

<cb>lsblk<>
@
@ lsblk



### Cron - Jobs - Add / Edit

<cb>crontab -e<>

Then:

<card>Opens file in editor.
Add / Update / Comment Out
Save changes.<>



### Cron - Jobs - List

<cb>crontab -l<>



### Date - Show

Show Date:

<cb>date<>

Show Formatted:

<cb>date [+"<v>format<>"]<>

	%d	// Date of month, 2 Digit
	%j	// Day of year, 3 Digit
	%V	// Week of Month, 2 Digit
	%m	// Month, 2 Digit
	%y	// Year, 2 Digit
	%Y	// Year, 4 Digit

	%a	// Day Name, 3 Char
	%A	// Day Name, Full
	%b	// Month Name, 3 Char
	%B	// Month Name, Full

	%k	// Hour, 00..23
	%l	// Hour, 1..12
	%M	// Minute, 2 Digit
	%s	// Seconds since 1970-01-01 00:00:00
	%S	// Seconds, 2 Digit

	%t	// Tab

	ex:
	date +"%Y-%m-%d"
	date +"%Y-%m-%d %H:%M:%S"

	ex:
	time = $(date +"%k:%M:%S")



### Directory - Change

To Root Directory:

<cb>cd /<>

To Home Directory:

<cb>cd ~<>

or

<cb>cd<>
@
@ cd, home, root


### Directory - Copy

<cb>cp -r <v>source_directory<> <v>target_directory<><>

Mac Only:

<cb>ditto <v>source_directory<> <v>target_directory<><>

<cb>ditto will merge both directories into <c><v>target_directory<><> or create it if it does not exist.
@
@ cp, ditto, -r



### Directory - Create

<cb>mkdir <v>directory<>

Create Any Missing Intermediate Directories As Needed:

<cb>mkdir -p <v>directory<>/<v>directory<>/<v>directory<><>
@
@ mkdir -p



### Directory - Delete - Empty

<cb>rmdir <v>directory<><>

Deletes empty directory only.
@
@ rmdir



### Directory - Delete - Complete

Delete Directory And Contents:

<cb>rm -rf <v>directory<><>

For Directories With '-' in Name:

<cb>rm -rf -- <v>directory<><>

'--' tells bash that directory is not an option even if it starts with -.



### Directory - List

<cb>ls<>

<cb>ls -al<>

Options:

	<c>-1<>		1 Per Line (default is in columns)
	<c>-a<>		Show All (inclued . files)
	<c>-l<>		Long format
	<c>-s<>		Sort By Size
	<c>-t<>		Sort By Time


Default:

	List Names Only
	In Columns
	By Name (Case Sensitive)


Include:

	All, Hidden			<c>-a<>
	Subdirectories			<c>-R<>

Display:

	1 Per Line			<c>-1<>
	Long Format			<c>-l<>

Sort By:

	Reverse				<c>-r<>

	Name				(Default, Case Sensitive)
	Size					<c>-s<>

	Time / Last Modified	<c>-t<>

@
@ Files, ls



### Directory - List - Names Only, 1 Per Line

<cb>ls -1<>

Include All:

<cb>ls -1a<>
@
@ Files, ls



### Directory - List - Sort By Name, Ignore Case

<cb>ls -1 | sort -f<>

Include All:

<cb>ls -1a | sort -f<>


Long Format, Include All:

<!>Nope. Doesn't work using <c>sort<> because fire permissions are displayed first.<>
@
@ Files, ls



### Directory - List - Sort By Name, Ignore Case, Using Locale

See:
<l>https://stackoverflow.com/questions/18413646/making-the-ls-command-sort-a-before-b-vs-a-b-a-b<>
@
@ Files, ls



### Directory - List - Sort By Size

<cb>ls -s<>

Include All, Long Format:

<cb>ls -als<>
@
@ Files, ls



### Directory - List - Sort By Time

<cb>ls -t<>

Reverse Order:

<cb>ls -rt<>

Include All, Long Format:

<cb>ls -alt<>


Lists by last modified time.
@
@ Files, ls



### Directory - List - With Subdirectories

<cb>ls -R <v>...<><>
@
@ Files, ls, With, Plus, Include



### Directory - List - Color On

<cb>ls --color=tty<>

Turns on name colors.
@
@ ls, colour




### Directory - List - Color Off

<cb>ls --color=none<>

Turns off name colors.
@
@ ls, colour



### Directory - List - To File

<cb>ls -1 > <v>file_names.txt<><>

Include All:

<cb>ls -1a > <v>file_names.txt<><>

Prints just the names in a list.
@
@ Save, Write



### Directory - Mirror

<cb>rsync -avE --delete <v>source_directory<>/ <v>target_parent_directory<>/<>

See: Rsync (below)



### Directory - Parent Name

<cb>dirname <v>directory_1<><>

Returns the parent directory of a directory.




### Directory  - Show Current

<cb>pwd<>

Print Working Directory.
@
@ Get




### Directories - Compare


<cb>diff -rq <v>directory_1<> <v>directory_2<> <>

Compares two directories and shows differences.

Shows files in one but not another.
Shows files that are different.


Extra - Filtered View:

<cb>diff <v>...<> | grep -v '\:\s\._' > <v>output_file<><>



### Directories - List Sizes

<v>du<>

<v>du -h <v>directory_1<><>

	<c>-h<>		Lists summary info.
	<c>-k<>		List sizes in Kilobytes.
	<c>-ks<>		List suing the size for each file.


Lists the size of all directories in the given directory.


Example:

<cb>du -k | sort -rn | head<>	
@
@ Get



### Devices - List Mounted

mount



### Devices - List USB

lsusb



### Drives - List All

diskutil list



### Drive - Size, Free Space

df -h

	-h	// Human Readable



### Drive - Mount

<cb>diskutil mount /Volumes/<v>mount_name<><>

Mount Windows Network Drive

<cb>mount -t smbfs //<v>server<>/<v>drive<> /Volumes/<v>mount_name<><>



### Drive - Unmount

diskutil unmount /Volumes/mountName



### Echo

echo print something $Var1



### Environment Variables - Show

printenv

printenv | sort 	// printenv returns an unsorted list.



### Exit

<cb>exit<>

<cb>exit exitValue<>



### File - Concatenate

<cb>cat<>

	cat filename 	// View the contents of a file.
	cat > filename 	// Create a new file from the console. (Ctrl + Z to close)



### File - Copy

<cb>cp -r  filename newFilename<>

		-a	// Preserve all possible attributes (timestamp, permissions, etc)
		-r	// Copy a directory recursively
		-v	// Verbose mode.



### File - Create from Console

<cb>cat > filename<>



### File - Date - Change

<cb>touch -a -m -t <v>YYYYMMDDhhmm.ss<> <v>file_name<><>

	-a		accessed date
	-m		modified date
	-t		timestamp

				<c><v>YYYYMMDDhhmm.ss<><>
				<c><v>YYMMDDhhmm<><>
				<c><v>MMDDhhmm<><>
@
@ timestamp, datetime, date time, update


### File - Delete

<cb>rm filename<>

Delete Directory And Contents:

<cb>rm -rf foldername<>

	-r	// Recursive
	-f	// Don't prompt



### File - Delete - Include Subdirs

<cb>find dirname -name filename -type f -delete<>

Example:

<cb>find /data -name "*.rtf" -type f -delete<>



### File - Dump - To Hex

<cb>hexdump file_name<>



### File - Exists?

<cb>if [ -f "filename" ]; then ...<>



### File - Does Not Exist

<cb>if [ ! -f "filename" ]; then ...<>

File - Find

find -name filename* 	// Find files starting with filename in the current directory.
find . -type f -name filename 	// Recursively searches for filename in current directory.
find . -type d -name dirName 	// Recursively searches for directory dirname in current directory.
find . -type f -name "*Phone*"

	-delete	// Delete the matching files.
	-executable	// Is an executable script file.
	-name filename 	// Match file name. Wild cards ok.
	-type f 	// Files Only
	-type d 	// Directories only
	-perm nnn 	// Match with these permissions. Ex 770

Uses:
find . -type f -exec chmod 755 {} +
find /path/to/base/dir -type f -exec chmod 644 {} +



### File - Group - Change

<cb>chgrp group files<>



### File - Line Count

<cb>wc -l file_name<>



### File - Link - Create

<cb>ln -s sourceFilename linkFilename<>

	-s 	// Creates a symbol link. Can link across devices.



### File - Link - Show Link Target

ls -l linkFilename 	// Shows the target file of a link.



### File - Move

mv filename newFilename
mv filename targetDirectory
mv filename targetDirectory/newFilename



### File - Owner - Change

chown user files

Ex: Change directory permissions only:

	find path -type d -exec chmod 755 {} +
	chmod 755 $(find path -type d)

Ex: Change file permissions only:

	find path -type f -exec chmod 644 {} +
	chmod 644 $(find path -type f)



### File - Permissions - Change

chmod permissions files

		- Permissions ugh	// User, Group, All
		- 4 + 2 + 1	// 4 - Read, 2 + Write, 1 - Execute

		- u, g, o	// u - user, g - group, o - other
		- +, -	// + - add permission, - - remove permission
		- r, w, x	// r - read, w - write, x - execute

	chmod 666 filename 	// Sets permissions to read, write for everyone
		chmod 770 scriptName 	// Sets permissions to read, write, execute for user, group. Everyone else has no access.

	chmod ug+rwx directoryName
	chmod ug+rw,o-w directoryName
	chmod -R g+rwx directoryName 	// Recursively go through all subdirectories



### File - Rename - Part

rename original_text new_text file_search

eg:	rename old new *

rename regex_replacement_string file_search

eg:	rename 's/old/new/' *



### File - Replace Text

sed -i -e 's/search_text/replacement_text/g' file_name

	-e	// Run an expression command. In this case 's' is the command.
	-i	// Inline Replacement. ie. Update the original file.

	'/g'	// Update all matches instead of just the first.
	's'	// Substitute.



### File - Search

See: File - Find



### File - Search

Match String:
Recursive Search Through All Files:

<cb>grep -r "<v>search_string<>" .<>

Match All Files With Given Extension

<cb>grep -r --include "<v>*.rtf<>" "<v>search_string<>" .<>
@
@ grep -r --include



### File - Search - File Names Containing Text

Match Files With Given Extensions, Match Strings 1 and 2:

<cb>egrep -ir --include=*.{<v>ext_1<>,<v>ext_2<>,<v>...<>} "(<v>match_1<>|<v>match_2<>)" .<>


Example:

<cb>egrep -ir --include=*.{<v>php<>,<v>html<>,<v>js<>} "(<v>document.cookie<>|<v>setcookie<>)" .<>
@
@ egrep --include



### File - Show Path To

which filename 	// Returns the path to a file



### File - Show Link Target

See "File Link - Show Source" (Below)



### File - Unlock In Path

chflags -R nouchg dirPath 	// Should work for OS X

	-R	// Recusive



### File - View	cat filename 

// Display entire file name.
more filename 	// Display file one page at a time (q to quit).
tail filename 	// Display the end of a file.
	- See Tail command (below)



### File - Word Count

<cb>wc -w file_name<>



### Filter Results - Match Text

<cb><v>...<> | grep "<v>match_text<>"<>
@
@ grep



### Filter Results - Not Containing Text

<cb><v>...<> | grep -v "<v>match_text<>"<>
@
@ grep -v



### FTP - SSH

sftp userId@serverUrl
sftp -i serverPemFile userId@serverUrl



### FTP - SSH - A Single File

scp userId@serverUrl localFile destinationFile 	// Include full path
scp -i serverPemFile userId@serverUrl



### Help - On A Command

<cb>man <v>command<><>

Press Q to exit.



### Java - Find

<cb>/usr/libexec/java_home<>

Mac only.



### Jobs

See: Process



### ls - colors - change

cp /etc/DIR_COLORS ~/.dir_colors
vi ~/.dir_colors

Find	- DIR 01;34     # directory
Change to	- DIR 01;33     # directory



### ls - colors - view

<cb>eval $(echo "no:global default;fi:normal file;di:directory;ln:symbolic link;pi:named pipe;so:socket;do:door;bd:block 	device;cd:character device;or:orphan symlink;mi:missing file;su:set uid;sg:set gid;tw:sticky other writable;ow:other 	writable;st:sticky;ex:executable;"|sed -e 's/:/="/g; s/\;/"\n/g')
{
	IFS=:
		for i in $LS_COLORS
	do
		echo -e "\e[${i#*=}m$( x=${i%=*}; [ "${!x}" ] && echo "${!x}" || echo "$x" )\e[m"
	done
}<>



### Memory - Process - Used

<cb>pmap -d <v>PID<><>

Mapped:				total amount of memory mapped to files.
Writeable/Private	amount of private address space.
Shared:				amount of address space the process is sharing with others.



### Memory - System - Total

grep MemTotal /proc/meminfo | awk '{print $2}'



### Memory - System - Used

See script in help directory.

<!>May need to relook that one up. Doesn't work on the mac.<>

	- or -

<cb>free<>



### Named Pipe - Create

<cb>mykfifo <v>pipe_file_name<><>



### Named Pipe - Delete	

<cb>rm <v>pipe_file_name<><>



### Named Pipe - Send Output To

<cb><v>...<> > <v>pipe_file_name<><>


Example:

<cb>echo "Send this to pipe" > <v>test_pipe<><>



### Network Connection - Test

<cb>nc -zv <v>ip_address<> <v>port<><>

<cb>nc -zv <v>ip_address<> <v>port_1<> <v>port_2<><>

<cb>nc -zv <v>ip_address<> <v>port_range_start<>-<v>port_range_end<><>

<cb>nc -zv <v>ip_address<> <v>port_1<> <v>port_2<> <v>port_range_start<>-<v>port_range_end<><>

nc = netcat



### Network - IP Address

<cb>hostname -I<>

Or

<cb>ip addr show<>

Or

<cb>sudo /sbin/ifconfig -a<>

	-a	// Show for multiple ip addresses.

Or

<cb>ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'<>
@
@ system, device



### Network - List Open Ports

<cb>netstat -an | grep "LISTEN"<>



### Network - Trace Route

<cb>traceroute <v>ip_address<>  | <v>url<><>



### OS - Kernel - Version

<cb>uname -r<>



### OS - Version

<cb>hostnamectl<>

Or

<cb>cat /etc/os-release<>



### Parameters - Shift

<cb>shift [n]<>


Shifts parameters by 1 or by n if given. $2 -> $1, $3 -> $2, etc.



### Path - Current

<cb>cwd<>


cwd (Current Working Directory)



### Port - Redirect

<cb>iptables -t nat -A PREROUTING -i eth0 -p tcp --dport <v>port_in<> -j REDIRECT --to-port <v>port_out<><>



### Port - Test

<cb>nc -zv <v>ip_address<> <v>port_number<><>



### Ports - Open - List

Linux:

<cb>netstat -tupln<>



### Print - Formatted

printf 'line to be printed %s %-20s ... \n' string1 string2...

	%s	// Print string.
	%10s	// Print 10 chars long, pad with spaces, right align.
	%-10s	// Print 10 chars long, pad with spaces, left align.
	/n	// New line. By default = no new line.



### Process - Find By Name

<cb>pgrep <v>app_name<><>

Linux:

<cb>pgrep -af '<v>regex_expression<>'<>

MacOS:

<cb>pgrep -if '<v>regex_expression<>'<>

	-f		Match against full argument list (defaults to process name only).
	-i		Ignore case.

or (less optimal):

<cb>ps -e | grep [<v>p<>]<v>rocess_name<><>

Searches for <c><v>process_name<>.
<c><v>process_name<> should be written <c>[<v>p<>]<v>rocess_name<><>. Eliminates the grep command from the results.

Example:

Show All Java Processes:

<cb>ps -ef | grep [<v>j<>]<v>ava<><>



### Process - id - Get

ps -ef | grep 'filterRegex' | awk '{print $2}'


Column 2 contains the process id.



### Process - Id - Get By Name

<cb>pgrep <v>app_name<><>

Using Regular Expression:

<cb>pgrep -if '<v>regex expression<>'<>


	<c>-f<>			Match against full argument list, instead of just name.
	<c>-i<>			Ignore Case

Example:

<cb>pgrep -if 'java .*cassandra'<>



### Process - Kill

<cb>kill <v>process_id<><>

Force Kill:

<v>kill -9 <v>process_id<><>



### Process - Kill By Name

<cb>pkill <v>app_name<><>

Using Regular Expression:

<cb>pkill -f '<v>regex expression<>'<>

	-f	// Match against full argument list, instead of just name.
	-i	// Ignore Case



### Process - Job - In Fg. - Suspend

<cb>ctrl + z<>


Suspends foreground job.



### Process - Job - Kill

<cb>kill %job_id<>



### Process - Job - Restart

<cb>bg %job_id 	// Will restart a suspended job.<>



### Process - Job - Suspend

<cb>kill -STOP %job_id<>



### Process - Job - To Background

<cb>bg %job_id<>



### Process - Job - To Foreground

<cb>fg %job_id<>



### Process - Jobs - List

jobs
jobs -l	// List Process Id



### Process - List

ps

	-e 	// List Every process.
	-f 	// Full format. Lists lots of items.
	-p id 	// Show for process id.
	-o field1,field2,... 	// Display process fields
	-u username 	// List jobs for that user only.

ex:
	ps -ef | grep [a]ppName 			// Shows all programs matching appName.
	ps -o ruser,pid,vsz,s,uid,comm -p id 	// Shows User Id, PID, State Command, etc.
	ps -e -o ruser,pid,s,vsz,stime,time,comm

pgrep	pgrep -if 'appName'
	pgrep -lf 'regexExpression'

		-f					// Match against full argument list.
		-i					// Ignore Case. Not always supported (aws linux).
		-l					// Long Format

	ex:
		pgrep -lf 'java .*Cassandra'



### Process - List by Use

<cb>top<>

Lists top working apps.



### Process - Run In Background

3 Steps:

Run Command Normally From the Terminal:

<cb><v>your_command<><>

Suspend Job:

<cb>Ctrl + Z<>

Continue in the Background:

<cb>bg %job_id<>




### Process - Run In Background

<cb><v>command &<>



### Process - Run In Background

<cb>nohup <v>command<> &<>


Run even if user logs out.



### Processes - CPU, Memory, Stats

ps -eo pid,cpu%,mem%,vsize,start,args | sort -k 4 -nr | head -25'

Top 25 By CPU	ps -eo pid,%cpu,%mem,vsize,start,args | sort -k 2 -nr | head -25



### Rsync

<cb>rsync <s>[<> <v>options<> <s>]<> <v>source_dir<> <v>target_parent_dir<><>

Mirror Directory:

<cb>rsync -avE --delete <v>source_dir<>/ <v>target_parent_dir<>/<>

With Identity File:

<cb>rsync -i <v>identity_file_path<> <v>...<><>


Options:

	<c>-a<>				archive (same as -rlptgoD)
	<c>-D<>				Same as --devices --specials
	<c>-E<>				copy extended attributes
	<c>-g<>				preserve groups
	<c>-i<> <v>file<>	login with identity file
	<c>-l<>				copy symlinks as symlinks
	<c>-o<>				preserve owner
	<c>-p<>				preserve permissions
	<c>-r<>				recursive
	<c>-t<>				preserve times
	<c>-v<>				verbose

	<c>-—exclude <v>file<> | <v>wildcard<><>
				 	exclude this/these files (wild cards ok but finicky).

	<c>--delete<>		delete extraneous files.
	<c>--devices<>		preserve device files (super user only).
	<c>--ignore-errors<>	continues copying other files if a file has an error.
	<c>--specials<>		preserve special files.
	<c>--version<>		show current version.
@
@ identity file


### Rsync - To Remote System

<cb>rsync <v>...<> <v>source_dir<>/ <v>user_name<>@<v>host<>:<v>target_dir<>/<>

Mirror Directory:

<cb>rsync -avE --delete <v>source_dir<>/ <v>user_name<>@<v>host<>:<v>target_dir<>/<>

Duplicates the directory <c><v>source_dir<><> on your computer to the directory <c><v>target_dir<><> on the remote system.
It will update and delete files as necessary.
@
@ sync, device



### Rsync - From Remote System

<cb>rsync <v>...<> <v>user_name<>@<v>host<>:<v>source_dir<>/ <v>target_dir<>/<>

Mirror Directory:

<cb>rsync -avE --delete <v>user_name<>@<v>host<>:<v>source_dir<>/ <v>target_dir<>/<>

Duplicates the directory <c><v>source_dir<><> on the remote system to the directory <c><v>target_dir<><> on your local computer.
It will update and delete files as necessary.
@
@ sync, device



### Script - Run

<cb>sh <v>script_file<><l>



### Script - Run in Current Env

<cb>source <v>script_file<><>



### Service - List All

<cb>systemctl<l>

See: Systemd - Summary (Doc)



### Sleep

<cb>sleep <v>seconds<><l>



### SSH

<cb>ssh <v>user_id<>@<v>server_url<><>

<cb>ssh -i <v>server_pem_file<> <v>user_id<>@<v>server_url<><>

Options:

	<c>-v<>				Verbose Mode
	<c>-i <v>pem_file<><>		Use a pem (identity) file.



### SSH - Key - Create Public / Private Key

<cb>ssh-keygen -t rsa -b 4096 -C "<v>user<>@<v>host<>"<>

<c><v>user<><> - Use your local user id.
<c><v>host<><> - Use your local host name.

Creates These By Default:

<cb>$HOME/.ssh/id_rsa
$HOME/.ssh/id_rsa.pub<>


Creates an identity key that can be use to securely identify you on other machines.
Useful for passwordless logins.

Use the user id as <c><v>user<><> and your computer's domain name as <c><v>host<><>.
Accept defaults.
Passphrase not required. Skip by pressing enter.
@
@ ssh-keygen, openssl, passwordless login



### SSH - Key - Send Public Key To Server

<cb>ssh-copy-id "<v>server_user<>@<v>server_host<>"<>

Shares the current user's public identity key with the server.
The server will ask for the server's user id to authenticate.
The server then saves the public key.

Should enable passwordless login.
@
@ ssh-copy-id, passwordless login



### SSH - Setup Passwordless Login

From the client computer:

<card>Create Public / Private SSH Key
(ssh-keygen)

Send Public Key To Server Computer
(ssh-copy-id)

Test
(ssh user@server_ip_address)<>


Allows the client computer to log into the server computer without a password.


Troubleshooting:

Getting errors with: "Matching host key"?
Edit <c>known_hosts<> and remove the offending line.

<cb>vi .ssh/known_hosts<>
@
@ ECDSA error ip key, differs


### su

<cb>su <v>user_id<><>


SU = Substitute User.

Switches to a user's identity or root if no user given.



### sudo

<cb>sudo <v>command<><>

<cb>sudo -u <v>user_id<> <v>command<><>

Run Previous Command Using <c>sudo<>:

<cb>sudo !!<>

<cb>sudo -u <v>user_id<> !!<>


SUDo = Substitute Do.

Executes a command as root or another user.



### System - Info

<cb>vmstat <v>length<> <v>count<><>

System information, free memory, cpu usage for a given length of time.



### System - IO Info

<cb>iostat <v>length<> <v>count<><>

IO information, cpu usage for a given length of time.



### Tar - Untar

<cb>tar xzf <v>file_name<><>

	f	Use filename as input.  2
	x	Extract. 1
	v	Verbose.
	z	Extract through gZip. 1
	-C <v>target_directory<> 	Expand to <c>target_directory<>.

Note: 1 - Needs to be first option. Does not need '-'.
Note: 2 - Needs to be last option.



### Tail

End of File:

<cb>tail <v>file_name<><>



### Tail Continuously

<cb>tail -f <v>file_name<><>



### Tail - Latest File

<cb>tail -f $(/bin/ls -1t  <v>directory/*<> | /bin/sed q)<>



### Telnet

<cb>telnet <v>server<> [<v>port<>]<>



### Telnet - SSH

See: SSH



### Terminal - Show Settings

stty -a



### Terminal - Set Delete Key

stay erase [backspace] 	// IN this case press the backspace key on the keyboard for the the key you want to be delete (say windows backspace key).



### Terminal - Set Timeout

Add to .bash_profile...

	TMOUT=numSeconds
	export TMOUT



### Time - Measure

time command… 	// Measures how long a command takes to run. Results at the bottom.



### Time - Show

<!>Add tag to Date (above)<>

See: Date - Show



### Time Zone - Get

date

or	date "%Z %z"			// Shows just the time zone.



### Time Zone - Set

For AWS Linux:

	Pick Timezone	/usr/share/zoneinfo/		// Folders with time zones
		/usr/share/zoneinfo/America

			America/New_York	// EST Time Zone
			UTC					// UTC Time Zone

	Update clock file	sudo vi /etc/sysconfig/clock

	Add	ZONE="America/New_York"

	Copy Timezone to Localtime	sudo ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime




### User - Create

<cb>adduser username<>

		-g group 	// Add to group
		-shell shellName	// Set user shell '/usr/bash' | '/usr/false'



### User - Delete

<cb>userdel -r username<>

	-f	// Force even if the user is logged in.
	-r	// Remove user's home directory.



### User - Get Id

<cb>id<>

	-a	// List all groups associated with the id as well.
	-q	// Quite mode.
	-qq	// Even quieter mode.



### User - Group - Set / Change To

<cb>usermod -G groupname username<>



### User - Groups - List

<cb>groups [ username ]<>

	id -Gn 	// Use on OS X where groups has been deprecated.

		-G, --groups	// List all user groups
		-n, —name	// Prints name instead of number.
		-p	// Format for humans.



### User - Info

<cb>id [ username ]<>



### User - Password - Change

<cb>passwd [ username ]<>



### Users - List

<cb>cut -d: -f1 /etc/passwd<>



### User Group - Create

<cb>groupadd groupname a<>



### User Group - Delete

<cb>groupdel groupname<>



### User Groups - List

<cb>cat /etc/group 		// Lists all as defined in /etc/groups<>

cut -d: -f1 /etc/group | sort 		// Better format.

dscacheutil -q group 		// OS X Specific.



### Version - Find

// One of the following...

cat /etc/*-release

lsb_release

cat /proc/version



### Web - Download

wget http://url-to-file 	// Will download the web url to the current directory.



### Zip - Compress

zip -r zipFile folderToCompress
zip -r zipFile file1 file2 ...
zip -r zipFile files -x filesToExclude

		-P password



### Zip - Unzip

<cb>unzip <v>zip_file<><>

Unzip To Target Directory:

<cb>unzip <v>zip_file<> -d <v>target_directory<><>
@
@ Uncompress



### Zip - View Contents

<cb>zipinfo <v>zip_file<><>



Index - Directories



### App - Global Config

/etc/appName
/usr/share/appName 	// Read Only, Independent of Machine
/usr/lib/appName 	// Read Only, Machine Specific
/var/lib/appName 	// Read / Write



### User - App Data / Config

/home/userName/.config/
/home/userName/.config/appName


### User - Home

/home/userName


### Others

~	Current User's home directory.
/home/userName 	User home directory.

/etc	Configuration files.
/opt	Server application directory (web apps, etc.)
/usr	USR = Unix System Resource. Used by distort packages. Leave alone.
/usr/local	Shared applications, 3rd party apps (java, etc.). Install shared apps here.
/usr/share/zoneinfo	Server supported time zones.
/var	Directory where the system & system installed apps stores changeable data (web servers, etc).
/var/run	Runtime Variable Data, PID files.



# Index - Config

/etc/init.d	Directory. Contains scripts for startup daemons. (Deprecated on some systems.  See Systemd - Summary (Doc)).
/etc/sysconfig/clock	File. The system timezone.
/etc/systemd/system	Directory. Scripts for Systemd services (See Systemd - Summary (Doc)).

/etc/groups	Groups.

/etc/profile	Base installed systemwide initialization file. May be overwritten by OS updates.
/etc/.profile.d	Directory. Systemwide initialization file. Use this to add items to the OS.

~/.profile	(Deprecated) Bourne Shell initialization file. Executed at login time. Bash will read this if found.
~/.bash_profile	Bash user initialization script file. Executed at login time.
~/.bashrc	Bash user per-interactive-shell startup file. Executed by "interactive" and "non-login" shells only.
~/.bash_logout	Bash user logout cleanup script.
~/.inputrc	Bash user readline initialization script file.

"Login" Shell Config Files	.login, .profile, .zlogin
	Executed when logging in from another host.
	Executed when opening a text console.

"Interactive" Shell Config Files	.bashrc, .tcshrc, .zschrc...
	Executed by shells connected to terminals or pseudo-terminals.



# Glossary


## Terms


### APT
Avanced Package Tool


### Daemon
A program that runs in the background.

This is generally a system wide service with only one running instance. Traditionally daemon names end with the letter d. Typically the init process is the part of daemons.

