# Linux Commands


# Files

### Permission Notation

<cb>drwxrwxrwx+<>

<c>d ... ... ...<>	Directory
<c>. rwx ... ...<>	Owner
<c>. ... rwx ...<>	Group
<c>. ... ... rwx<>	Everyone
<c>. ... ... ... +<>	Additional Permissions

r	Read
w	Write
x	Execute



### File Mode Notation

<cb><v>uga<><>

<c><v>u<><>	User Value
<c><v>g<><>	Group Value
<c><v>a<><>	All Value

1	Execute
2	Write
4	Read


Example:

<card>User	Read, Write, Execute	7
Group	Read, Execute		5
All		Read Only			4<>

Mode:

<cb>754<>


Example:

<card>User	Read, Execute			5
Group	Read, Execute		5
All		No Access			0<>

Mode:

<cb>550<>



# Cron
@
@ App


## Cron - Commands


### Cron - Jobs - List All

<cb>crontab -l<>



### Cron - Jobs - Edit Existing Jobs

<cb>crontab -e<>



### Cron - Jobs - Remove

<cb>crontab -r<>



### Cron - Schedule Job

<cb>crontab <v>cron_job_file<><>

Schedule jobs in cron from cron job settings file.



## Cron - Job File Format

Each line refers to one job. Add as many lines to the file as you need to schedule your jobs.

Line Format:

<cb><v>min<> <v>hour<> <v>day<> <v>month<> <v>day_of_week<> <v>shell_command<><>

<c>min<>				<c><s>[<> 0 - 59 <s>|<> * <s>]<><>
<c>hour<>			<c><s>[<> 0 - 23 <s>|<> * <s>]<><>
<c>day<>				<c><s>[<> 1 - 31 <s>|<> * <s>]<><>
<c>month<>			<c><s>[<> 1 - 12 <s>|<> * <s>]<><>
<c>day_of_week<>		<c><s>[<> 0 - 6  <s>|<> * <s>]<><>		0 = Sunday

<c><v>shell_command<><>	The Command to Execute

<c>*<>				All Times (* is a wild card)


<b><m>Check and Format:<><>


Item Time Format	Second Minute Hour Day-of-Month Month Day-of-Week

	Each: Can be number, number range, number list, wild card
	Each: Number:	5
	Each: Number range:	2-5
	Each: Number list:	2,3,7
	Each: Wild card (all):	*
	Each: Unknown (day of week, etc.):	?			// Not supported by all cron implementations.

	Day of Month:		1-31
	Day of Week:		0-6 or SUN-SAT
					L (last of month)			// Ex: 6L	Last Friday of month
		# (specifies which week of month)	// Ex: 6#2	2nd Friday of every month

Logging Response

	To Null				??
	To Log File			&> /tmp/logs/cron.logs 

Example:

0 17 * * 5 somescript.sh		Runs somescript.sh at 5 PM every Friday.
1 0/2 * * * somescript.sh		Runs somescript.sh every 2 hours starting at 1 minute past midnight every night.



## Cron - How To


### Cron Service - Test If Up

<cb>ps -ef | grep cron | grep -v grep<>



### Files And Directories

Log Directories:

<cb>/var/log/cron<>

<cb>/var/log/syslog<>


<c>/var/log/cron<>		Directory for cron logs (true for AWS Linux).

<c>/var/log/syslog<>		May be a file.



# Services / init.d / rc
@
@ initd



### init.d - Service - Start

<cb>/etc/init.d/<v>script_name<> start<>

<cb>/etc/rc.d/init.d/<v>script_name<> start<>

Directory depends on OS (not standardized).



### init.d - Service - Stop

<cb>/etc/init.d/<v>script_name<> stop<>

<cb>/etc/rc.d/init.d/<v>script_name<> stop<>

Directory depends on OS (not standardized).



### init.d - Service - Add

Add Service Script to init.d Directory <^><#>1<><>:

<cb>/etc/init.d/<v>service_name<><>

<cb>/etc/rc.d/init.d/<v>service_name<><>

Add To init.d Service:

<cb>chkconfig --add <v>service_name<><>

1 - Directory depends on OS (not standardized).

<m>Is this right?
See: init.d - Service Script - Create / Add (below)<>

<m>What does <c>chkconfig --add <v>service_name<><> do?<>
@
@ chkconfig --add, TODO



### init.d - Service - Run Once at Startup

Add To:

<cb>/etc/rc.d/rc.local/<>



### init.d - Service - View

<cb>chkconfig --list <v>service_name<><>
@
@ chkconfig --list



### init.d - Services - List

<cb>chkconfig --list<>
@
@ chkconfig --list



### init.d - Server Reboot

<cb>sudo init 6<>
@
@ init 6



### init.d - Service Script - Create / Add

Format:

<card>Bash Script (typically)<>

Location:

<cb>/etc/rc.d/init.d<>

Add Startup Link<^><#>1<><>:

<cb>/etc/rc.d/rc2.d/S<v>99<><v>service_name<><>

or

<cb>/etc/rc.d/rc3.d/S<v>99<><v>service_name<><>


Add Shutdown Link (Both Directories):

<cb>/etc/rc.d/rc0.d/K<v>99<><v>service_name<><>

<cb>/etc/rc.d/rc6.d/K<v>99<><v>service_name<><>


<b>Requirements:<>

<*>Must Have <c># chkconfig<> Line
Startup Script Must Start Service with <!>NON-root<> ID
Startup Script Must Support Actions (start, stop, restart, status)<>


1 - File name should start with S<v>99<>. Determins startup order.

1 - The directory is OS dependent.



#### init.d - Service Script - chkconfig Line

chkconfig Line:

<cb># chkconfig: <v>run_levels<> <v>start_order<> <v>kill_order<><>

Example:

<cb># chkconfig: 2345 40 80<>



#### init.d - Service Script - Supported Commands

Usage<^><#>1<><>:

<cb><v>service_name<> <v>command<><>

command:

<cb>start | stop | restart | status<>


The startup script must support these 4 commands.

See: sample script



#### init.d - Service Script - Startup Link

Create Startup Link<^><#>1<><>:

<cb>.../rc2.d/S<v>99<><v>service_name<><>

<cb>.../rc3.d/S<v>99<><v>service_name<><>


Link Name Format (required):

<cb>S<v>99<><v>service_name<><>

<card><table><col><c>S<><><col>Start<>
<col><c><v>99<><><><col>Start Order<>
<col><c><v>service_name<><><><col>Must Match Original Script Name (in init.d directory)<><><>


1 - OS Dependent


Example:

<card>sudo ln -s /etc/rc.d/init.d/service_1  /etc/rc.d/rc3.d/S91service_1<>



#### init.d - Service Script - Shutdown Link

Create Shutdown Link (Both Directories):

<cb>.../rc0.d/K<v>99<><v>service_name<><>

<cb>.../rc6.d/K<v>99<><v>service_name<><>


Link Name Format (required):

<cb>K<v>99<><v>service_name<><>

<card><table><col><c>K<><><col>Start<>
<col><c><v>99<><><><col>Kill Order<>
<col><c><v>service_name<><><><col>Must Match Original Script Name (in init.d directory)<><><>


Example:

<card>sudo ln -s /etc/rc.d/init.d/service_1  /etc/rc.d/rc0.d/K91service_1<>



### init.d - Service Script - Sample

<cb>#!/bin/bash
<#># chkconfig: 2345 20 80
\# description: Description comes here....<>

<#># Source function library.<>
. /etc/init.d/functions

start() {
    <#># code to start app comes here 
    # eg: daemon program_name &
    # eg: su service_user_id -C path_to_script > path_to_log &<>

}

stop() {
    <#># code to stop app comes here 
    # eg: killproc program_name
    # eg: killproc -p pid_file program_name
    # eg: pkill -if 'app_regex_expression'<>
}

status() {
    <#># code to check status of app comes here<>
}

case "<v>$1<>" in 
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart}"
esac

exit 0<>


### init.d - Directories

<card><table><col><c>/etc/init<>		<><col>?<>
<col> <>
<col><c>/etc/init.d<><><col>Files to be run by init.
Often symbolically linked to a file in the rc.d directory.
(/etc/rc.d/init.d)<>
<col> <>
<col><c>/etc/rc.d<><><col>Run Commands (Startup Scripts)<>
<col> <>
<col><c>/etc/rc.d/init.d<><><col>Location of actual startup scripts<>
<col> <>
<col><c>/etc/rc.d/rcN.d<><><col>Location of run level script where N = the run level (0 - 6)
Contains links to the actual scripts in /etc/rc.d/init.d<><><>



### init.d - Files

<card><table><col><c>/etc/inittab<><><col>Controls service configurations
Change default run levels here.
May be moved / not used.<>
<col> <>
<col><c>/etc/rc.local<><><col>Run once after all other scripts but before any login prompts.
Put local setup commands in here.

Often symbolically linked to a file in the rc.d directory.
-> /ect/rc.d/rc.local<>
<col> <>
<col><c>/etc/init/rcS.conf<><><col>System initialization script
Instead of /etc/inittab<>
<col> <>
<col><c>/etc/init/rc.conf<><><col>Individual Run Levels<>
<col> <>
<col><c>/etc/init.d/functions<><><col>Common init.d Functions<><><>

<card><table><col><c>K<v>99script_name<><>		<><col>Kill script link. Links to the original script in init.d.

K = Kill

<v>99<> = Start Order

<v>script_name<> is the original script name.

Script links starting with K will be ordered to stop.

Located in /etc/rc.d/rc<v>N<>.d directories (typically rc0.d and rc6.d)<>
<col> <>
<col><c>S<v>99script_name<><><><col>Start script link. Links to the original script in init.d.

S = Start

<v>99<> = Start Order

<v>script_name<> is the original script name.

Script links starting with S will be ordered to start.

Located in /etc/rc.d/rc<v>N<>.d directories (typically rc2.d, rc3.d)<><><>


<c>K<v>99script_name<><> Example:

<cb>/etc/rc.d/rc0.d/K81apachewebserver<>


<c>S<v>99script_name<><> Example:

<cb>/etc/rc.d/rc3.d/S79apachewebserver<>



### init.d - Run Levels

These are not standardized.

<card><table><col>1, 2		<><col>For System Problems<>
<col>2<><col>Default Debian Non-GUI Mode<>
<col>4, 5<><col>GUI / Interactive Text Modes<>
<col>0, 6<><col>Never (used when system is starting or rebooting)<><><>



### init.d - Run Levels / Redhat 6, Amazon Linux

<card><table><col>0		<><col>Halt (Do NOT set the init default to this)<>
<col>1<><col>Single User Mode<>
<col>2<><col>Multiuser, Without NFS (same as 3 but no network)<>
<col>3<><col>Full Multiuser Mode<>
<col>4<><col>Unused<>
<col>5<><col>X11<>
<col>6<><col>Reboot (Do NOT set the init default to this)<><><>



### init.d - Run Level - Start

<card><table><col>Debian<><col>2<>
<col>Redhat, Amazon Linux, Typical (?)<><col>3<><><>



### init.d - Run Level - Reboot

<card><table><col>0, 6		<><col>Kill scripts in <c>rc0.d<>, <c>rc6.d<><><><>



### init.d - Used By

<card>Amazon Linux
Redhat<>
@
@ redhat, amazon linux



# Services / systemd

<m>How to add service to systemd?<>

<m>How to start under non-root id?<>

<m>How to properly capture output (log files)?<>

<m>How to handle startup order?<>

<m>How to restart a service?<>
@
@ system.d, systemd-only



### systemd - Service - Start

<cb>systemctl start <v>service_name<><>
@
@ systemctl start



### systemd - Service - Stop

<cb>systemctl stop <v>service_name<><>
@
@ systemctl stop serviceName



### systemd - Service - Enable Start on Boot

<cb>systemctl enable <v>service_name<><>
@
@ systemctl enable



### systemd - Service - Check Status

<cb>systemctl status <v>service_name<><>
@
@ systemctl status


### systemd - Services - List All

<cb>systemctl<>
@
@ systemctl



### systemd - Services - Relead

<cb>systemctl daemon-reload<>
@
@ systemctl daemon-reload



### systemd - systemd Statuses

<cb>Enabled
Static
Disabled<>

<m>(what are these? how are they used?)<>
@
@ enabled, static, disabled.



### systemd - Logs - Check

<cb>journalctl -u <v>service_name<>.<v>service<><>
@
@ journalctl -u



### systemd - Troublshooting - "Bad Message"

Usually implies invalid syntax.



### systemd - Configuration Directory / Files

<cb>/etc/systemd/system<>



### systemd - File - Unit File

A text file that contains information for a service.

Format: ini file



# How To / Commands


### Alias

<cb>alias <v>name<>=<v>command<><>

Multiple Commands:

<cb>alias <v>name<>='<v>command; command;...<>'<>



Example:

<cb>alias home="cd '$HOME'"<>



### Bash

<cb>/bin/bash<>



### Bash - Version

Long Format:

<cb>bash --version<>

Something Like '4.2.8':

<cb>echo ${BASH_VERSION%%[^0-9.]*}<>

Something Like '4.2.8(1)-release:

<cb>echo $BASH_VERSION<>



### Block Devices - List

<cb>lsblk<>
@
@ lsblk



### Cron - Jobs - Add / Edit

<cb>crontab -e<>

Then:

<card>Opens file in editor.
Add / Update / Comment Out
Save changes.<>



### Command-line Shell - Which One?

<cb>echo $0<>

Shows which command-line shell you are using.

Run from the command prompt.
Will not work inside scripts.
@
@ commandline, bash, zsch, sh, terminal



### Date - Show

Show Date:

<cb>date<>

Show Formatted:

<cb>date [+"<v>format<>"]<>

	%d	// Date of month, 2 Digit
	%j	// Day of year, 3 Digit
	%V	// Week of Month, 2 Digit
	%m	// Month, 2 Digit
	%y	// Year, 2 Digit
	%Y	// Year, 4 Digit

	%a	// Day Name, 3 Char
	%A	// Day Name, Full
	%b	// Month Name, 3 Char
	%B	// Month Name, Full

	%k	// Hour, 00..23
	%l	// Hour, 1..12
	%M	// Minute, 2 Digit
	%s	// Seconds since 1970-01-01 00:00:00
	%S	// Seconds, 2 Digit

	%t	// Tab

	ex:
	date +"%Y-%m-%d"
	date +"%Y-%m-%d %H:%M:%S"

	ex:
	time = $(date +"%k:%M:%S")



### Directory - Change

To Root Directory:

<cb>cd /<>

To Home Directory:

<cb>cd ~<>

or

<cb>cd<>
@
@ cd, home, root


### Directory - Copy

<cb>cp -r <v>source_directory<> <v>target_directory<><>

Mac Only:

<cb>ditto <v>source_directory<> <v>target_directory<><>

<cb>ditto will merge both directories into <c><v>target_directory<><> or create it if it does not exist.<>
@
@ cp, ditto, -r



### Directory - Create

<cb>mkdir <v>directory<><>


Creates a directory
@
@ mkdir, make



### Directory - Create Complete With Subdirectories

<cb>mkdir -p <v>directory<>/<v>directory<>/<v>directory<><>

Creates all missing intermediate directories as needed.
@
@ mkdir -p, make, recursively,



### Directory - Delete - Empty

<cb>rmdir <v>directory<><>

Deletes empty directory only.
@
@ rmdir



### Directory - Delete - Non Empty

Delete Directory And Contents:

<cb>rm -rf <v>directory<><>

For Directories With '-' in Name:

<cb>rm -rf -- <v>directory<><>

'--' tells bash that directory is not an option even if it starts with -.
@
@ completely, all



### Directory - List

<cb>ls<>

<cb>ls -al<>

Options:

	<c>-1<>		1 Per Line (default is in columns)
	<c>-a<>		Show All (inclued . files)
	<c>-l<>		Long format
	<c>-s<>		Sort By Size
	<c>-t<>		Sort By Time


Default:

	List Names Only
	In Columns
	By Name (Case Sensitive)


Include:

	All, Hidden			<c>-a<>
	Subdirectories			<c>-R<>

Display:

	1 Per Line			<c>-1<>
	Long Format			<c>-l<>

Sort By:

	Reverse				<c>-r<>

	Name				(Default, Case Sensitive)
	Size					<c>-s<>

	Time / Last Modified	<c>-t<>

@
@ Files, ls



### Directory - List - Names Only, 1 Per Line

<cb>ls -1<>

Include All:

<cb>ls -1a<>
@
@ Files, ls



### Directory - List - Sort By Name, Ignore Case

<cb>ls -1 | sort -f<>

Include All:

<cb>ls -1a | sort -f<>


Long Format, Include All:

<!>Nope. Doesn't work using <c>sort<> because fire permissions are displayed first.<>
@
@ Files, ls



### Directory - List - Sort By Name, Ignore Case, Using Locale

See:
<l>https://stackoverflow.com/questions/18413646/making-the-ls-command-sort-a-before-b-vs-a-b-a-b<>
@
@ Files, ls



### Directory - List - Sort By Size

<cb>ls -s<>

Include All, Long Format:

<cb>ls -als<>
@
@ Files, ls



### Directory - List - Sort By Time

<cb>ls -t<>

Reverse Order:

<cb>ls -rt<>

Include All, Long Format:

<cb>ls -alt<>


Lists by last modified time.
@
@ Files, ls



### Directory - List - With Subdirectories

<cb>ls -R <v>...<><>
@
@ Files, ls, With, Plus, Include



### Directory - List - Color On

<cb>ls --color=tty<>

Turns on name colors.
@
@ ls, colour




### Directory - List - Color Off

<cb>ls --color=none<>

Turns off name colors.
@
@ ls, colour



### Directory - List - To File

<cb>ls -1 > <v>file_names.txt<><>

Include All:

<cb>ls -1a > <v>file_names.txt<><>

Prints just the names in a list.
@
@ Save, Write



### Directory - Mirror

<cb>rsync -avE --delete <v>source_directory<>/ <v>target_parent_directory<>/<>

See: Rsync (below)



### Directory - Parent Name

<cb>dirname <v>directory_1<><>

Returns the parent directory of a directory.




### Directory  - Show Current

<cb>pwd<>

Print Working Directory.
@
@ Get




### Directories - Compare


<cb>diff -rq <v>directory_1<> <v>directory_2<> <>

Compares two directories and shows differences.

Shows files in one but not another.
Shows files that are different.


Extra - Filtered View:

<cb>diff <v>...<> | grep -v '\:\s\._' > <v>output_file<><>



### Directories - List Sizes

<v>du<>

<v>du -h <v>directory_1<><>

	<c>-h<>		Lists summary info.
	<c>-k<>		List sizes in Kilobytes.
	<c>-ks<>		List suing the size for each file.


Lists the size of all directories in the given directory.


Example:

<cb>du -k | sort -rn | head<>	
@
@ Get



### Devices - List Mounted

<cb>mount<>
@
@ mount



### Devices - List USB

<cb>lsusb<>
@
@ lsusb



### Drives - List All

<cb>diskutil list<>
@
@ diskutil list



### Drive - Size, Free Space

<cb>df -h<>

<c>-h<>		Human Readable
@
@ df -h



### Drive - Mount

<cb>diskutil mount /Volumes/<v>mount_name<><>

Mount Windows Network Drive

<cb>mount -t smbfs //<v>server<>/<v>drive<> /Volumes/<v>mount_name<><>
@
@ diskutil mount



### Drive - Unmount

<cb>diskutil unmount /Volumes/<v>mount_name<><>
@
@ diskutil unmount



### Echo

<cb>echo <v>Text to print<><>

<cb>echo "<v>Your text here.<>"<>

<cb>echo $<v>VARIABLE_1<><>



### Environment Variables - Show

<cb>printenv<>

Show Sorted:

<cb>printenv | sort<>



### Exit

<cb>exit<>

<cb>exit exitValue<>



### File - Concatenate

<cb>cat<>

View File Contents:

<cb>cat <v>file_name<><>

Create File From Console:

<card><c>cat > <v>file_name<><>

(Ctrl + Z to close)<>
@
@ cat



### File - Copy

<cb>cp -r  filename newFilename<>

		-a	// Preserve all possible attributes (timestamp, permissions, etc)
		-r	// Copy a directory recursively
		-v	// Verbose mode.



### File - Create from Console

<cb>cat > filename<>



### File - Date - Change

<cb>touch -a -m -t <v>YYYYMMDDhhmm.ss<> <v>file_name<><>

	-a		accessed date
	-m		modified date
	-t		timestamp

				<c><v>YYYYMMDDhhmm.ss<><>
				<c><v>YYMMDDhhmm<><>
				<c><v>MMDDhhmm<><>
@
@ timestamp, datetime, date time, update


### File - Delete

<cb>rm filename<>

Delete Directory And Contents:

<cb>rm -rf foldername<>

	-r	// Recursive
	-f	// Don't prompt



### File - Delete - Include Subdirs

<cb>find dirname -name filename -type f -delete<>

Example:

<cb>find /data -name "*.rtf" -type f -delete<>



### File - Dump - To Hex

<cb>hexdump file_name<>



### File - Exists?

<cb>if [ -f "filename" ]; then ...<>



### File - Does Not Exist

<cb>if [ ! -f "filename" ]; then ...<>

File - Find

find -name filename* 	// Find files starting with filename in the current directory.
find . -type f -name filename 	// Recursively searches for filename in current directory.
find . -type d -name dirName 	// Recursively searches for directory dirname in current directory.
find . -type f -name "*Phone*"

	-delete	// Delete the matching files.
	-executable	// Is an executable script file.
	-name filename 	// Match file name. Wild cards ok.
	-type f 	// Files Only
	-type d 	// Directories only
	-perm nnn 	// Match with these permissions. Ex 770

Uses:
find . -type f -exec chmod 755 {} +
find /path/to/base/dir -type f -exec chmod 644 {} +



### File - Group - Change

<cb>chgrp group files<>



### File - Line Count

<cb>wc -l file_name<>



### File - Link - Create

<cb>ln -s <v>source_path<> <v>link_name<><>

<c>-s<>		Creates a symbol link. Can link across devices.


Creates a link to the source file or directory.
@
@ ln -s
@ directory, folder, new



### File - Link - Show Link Target

<cb>ls -l <v>link_name<><>


Shows the target file of a link.
@
@ directory, get, print


### File - Move

mv filename newFilename
mv filename targetDirectory
mv filename targetDirectory/newFilename



### File - Owner - Change

chown user files

Ex: Change directory permissions only:

	find path -type d -exec chmod 755 {} +
	chmod 755 $(find path -type d)

Ex: Change file permissions only:

	find path -type f -exec chmod 644 {} +
	chmod 644 $(find path -type f)



### File - Permissions - Change

chmod permissions files

		- Permissions ugh	// User, Group, All
		- 4 + 2 + 1	// 4 - Read, 2 + Write, 1 - Execute

		- u, g, o	// u - user, g - group, o - other
		- +, -	// + - add permission, - - remove permission
		- r, w, x	// r - read, w - write, x - execute

	chmod 666 filename 	// Sets permissions to read, write for everyone
		chmod 770 scriptName 	// Sets permissions to read, write, execute for user, group. Everyone else has no access.

	chmod ug+rwx directoryName
	chmod ug+rw,o-w directoryName
	chmod -R g+rwx directoryName 	// Recursively go through all subdirectories



### File - Rename - Part

rename original_text new_text file_search

eg:	rename old new *

rename regex_replacement_string file_search

eg:	rename 's/old/new/' *



### File - Replace Text

sed -i -e 's/search_text/replacement_text/g' file_name

	-e	// Run an expression command. In this case 's' is the command.
	-i	// Inline Replacement. ie. Update the original file.

	'/g'	// Update all matches instead of just the first.
	's'	// Substitute.



### File - Search

See: File - Find



### File - Search

Match String:
Recursive Search Through All Files:

<cb>grep -r "<v>search_string<>" .<>

Match All Files With Given Extension

<cb>grep -r --include "<v>*.rtf<>" "<v>search_string<>" .<>
@
@ grep -r --include



### File - Search - File Names Containing Text

Match Files With Given Extensions, Match Strings 1 and 2:

<cb>egrep -ir --include=*.{<v>ext_1<>,<v>ext_2<>,<v>...<>} "(<v>match_1<>|<v>match_2<>)" .<>


Example:

<cb>egrep -ir --include=*.{<v>php<>,<v>html<>,<v>js<>} "(<v>document.cookie<>|<v>setcookie<>)" .<>
@
@ egrep --include



### File - Show Path To

which filename 	// Returns the path to a file



### File - Show Link Target

See "File Link - Show Source" (Below)



### File - Unlock In Path

chflags -R nouchg dirPath 	// Should work for OS X

	-R	// Recusive



### File - View	cat filename 

// Display entire file name.
more filename 	// Display file one page at a time (q to quit).
tail filename 	// Display the end of a file.
	- See Tail command (below)



### File - Word Count

<cb>wc -w file_name<>



### File System - Get

<cb>df -Th<>


Returns the mounted systems with the file system in the 2nd column.



### Filter Results - Match Text

<cb><v>...<> | grep "<v>match_text<>"<>
@
@ grep



### Filter Results - Not Containing Text

<cb><v>...<> | grep -v "<v>match_text<>"<>
@
@ grep -v



### FTP - SSH

sftp userId@serverUrl
sftp -i serverPemFile userId@serverUrl



### FTP - SSH - A Single File

scp userId@serverUrl localFile destinationFile 	// Include full path
scp -i serverPemFile userId@serverUrl



### Help - On A Command

<cb>man <v>command<><>

Press Q to exit.



### Java - Find

<cb>/usr/libexec/java_home<>

Mac only.



### ls - colors - change

<cb>cp /etc/DIR_COLORS ~/.dir_colors
vi ~/.dir_colors<>

<card><table><col>Find<><col>- DIR 01;34<><col># directory<>
<col>Change to<><col>- DIR 01;33<><col># directory<><><>



### ls - colors - view

<cb>eval $(echo "no:global default;fi:normal file;di:directory;ln:symbolic link;pi:named pipe;so:socket;do:door;bd:block device;cd:character device;or:orphan symlink;mi:missing file;su:set uid;sg:set gid;tw:sticky other writable;ow:other writable;st:sticky;ex:executable;"|sed -e 's/:/="/g; s/\;/"\n/g')
{
	IFS=:
		for i in $LS_COLORS
	do
		echo -e "\e[${i#*=}m$( x=${i%=*}; [ "${!x}" ] && echo "${!x}" || echo "$x" )\e[m"
	done
}<>



### Memory - Process - Used

<cb>pmap -d <v>PID<><>

<table><col>Mapped:<><col>total amount of memory mapped to files.<>
<col>Writeable/Private<><col>amount of private address space.<>
<col>Shared:<><col>amount of address space the process is sharing with others.<><>



### Memory - System - Total

<cb>grep MemTotal /proc/meminfo | awk '{print $2}'<>



### Memory - System - Used

See script in help directory.

<!>May need to relook that one up. Doesn't work on the mac.<>

	- or -

<cb>free<>



### Named Pipe - Create

<cb>mykfifo <v>pipe_file_name<><>



### Named Pipe - Delete	

<cb>rm <v>pipe_file_name<><>



### Named Pipe - Send Output To

<cb><v>...<> > <v>pipe_file_name<><>


Example:

<cb>echo "Send this to pipe" > <v>test_pipe<><>



### Network Connection - Test

<cb>nc -zv <v>ip_address<> <v>port<><>

<cb>nc -zv <v>ip_address<> <v>port_1<> <v>port_2<><>

<cb>nc -zv <v>ip_address<> <v>port_range_start<>-<v>port_range_end<><>

<cb>nc -zv <v>ip_address<> <v>port_1<> <v>port_2<> <v>port_range_start<>-<v>port_range_end<><>

nc = netcat



### Network - IP Address

<cb>hostname -I<>

Or

<cb>ip addr show<>

Or

<cb>sudo /sbin/ifconfig -a<>

	-a	// Show for multiple ip addresses.

Or

<cb>ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'<>
@
@ system, device



### Network - List Open Ports

<cb>netstat -an | grep "LISTEN"<>



### Network - Trace Route

<cb>traceroute <v>ip_address<>  | <v>url<><>



### OS - Kernel - Version

<cb>uname -r<>



### OS - Version

<cb>hostnamectl<>

Or

<cb>cat /etc/os-release<>



### Parameters - Shift

<cb>shift [n]<>


Shifts parameters by 1 or by n if given. $2 -> $1, $3 -> $2, etc.



### Path - Current

<cb>cwd<>


cwd (Current Working Directory)



### Port - Redirect

<cb>iptables -t nat -A PREROUTING -i eth0 -p tcp --dport <v>port_in<> -j REDIRECT --to-port <v>port_out<><>



### Port - Test

<cb>nc -zv <v>ip_address<> <v>port_number<><>



### Ports - Open - List

Linux:

<cb>netstat -tupln<>



### Print - Formatted

<cb>printf '<v>line to be printed<> %s %-20s <v>... \n<>' <v>string1<> <v>string2<><v>...<><>

<table><col><c>%s<>		<><col>Print string.<>
<col><c>%10s<><><col>Print 10 chars long, pad with spaces, right align.<>
<col><c>%-10s<><><col>Print 10 chars long, pad with spaces, left align.<>
<col><c>/n<><><col>New line. By default = no new line.<><>



### Process - Find By Name

<cb>pgrep <v>app_name<><>

Linux:

<cb>pgrep -af '<v>regex_expression<>'<>

MacOS:

<cb>pgrep -if '<v>regex_expression<>'<>

	-f		Match against full argument list (defaults to process name only).
	-i		Ignore case.

or (less optimal):

<cb>ps -e | grep [<v>p<>]<v>rocess_name<><>

Searches for <c><v>process_name<>.
<c><v>process_name<> should be written <c>[<v>p<>]<v>rocess_name<><>. Eliminates the grep command from the results.

Example:

Show All Java Processes:

<cb>ps -ef | grep [<v>j<>]<v>ava<><>



### Process - id - Get

ps -ef | grep 'filterRegex' | awk '{print $2}'


Column 2 contains the process id.



### Process - Id - Get By Name

<cb>pgrep <v>app_name<><>

Using Regular Expression:

<cb>pgrep -if '<v>regex expression<>'<>


<table><col><c>-f<>	<><col>Match against full argument list, instead of just name.<>
<col><c>-i<><><col>Ignore Case<><>


Example:

<cb>pgrep -if 'java .*cassandra'<>



### Process - Kill

<cb>kill <v>process_id<><>

Force Kill:

<v>kill -9 <v>process_id<><>



### Process - Kill By Name

<cb>pkill <v>app_name<><>

Using Regular Expression:

<cb>pkill -f '<v>regex expression<>'<>

	-f	// Match against full argument list, instead of just name.
	-i	// Ignore Case



### Process - Job - In Fg. - Suspend

<cb>ctrl + z<>


Suspends foreground job.



### Process - Job - Kill

<cb>kill %job_id<>



### Process - Job - Restart

<cb>bg %job_id 	// Will restart a suspended job.<>



### Process - Job - Suspend

<cb>kill -STOP %job_id<>



### Process - Job - To Background

<cb>bg %job_id<>



### Process - Job - To Foreground

<cb>fg %job_id<>



### Process - Jobs - List

jobs
jobs -l	// List Process Id



### Process - List

ps

	-e 	// List Every process.
	-f 	// Full format. Lists lots of items.
	-p id 	// Show for process id.
	-o field1,field2,... 	// Display process fields
	-u username 	// List jobs for that user only.

ex:
	ps -ef | grep [a]ppName 			// Shows all programs matching appName.
	ps -o ruser,pid,vsz,s,uid,comm -p id 	// Shows User Id, PID, State Command, etc.
	ps -e -o ruser,pid,s,vsz,stime,time,comm

pgrep	pgrep -if 'appName'
	pgrep -lf 'regexExpression'

		-f					// Match against full argument list.
		-i					// Ignore Case. Not always supported (aws linux).
		-l					// Long Format

	ex:
		pgrep -lf 'java .*Cassandra'



### Process - List by Use

<cb>top<>

Lists top working apps.



### Process - Run In Background

3 Steps:

Run Command Normally From the Terminal:

<cb><v>your_command<><>

Suspend Job:

<cb>Ctrl + Z<>

Continue in the Background:

<cb>bg %job_id<>




### Process - Run In Background

<cb><v>command &<>



### Process - Run In Background

<cb>nohup <v>command<> &<>


Runs command even if the user logs out.



### Processes - CPU, Memory, Stats

ps -eo pid,cpu%,mem%,vsize,start,args | sort -k 4 -nr | head -25'

Top 25 By CPU	ps -eo pid,%cpu,%mem,vsize,start,args | sort -k 2 -nr | head -25



### Rsync

<cb>rsync <s>[<> <v>options<> <s>]<> <v>source_dir<> <v>target_parent_dir<><>

Mirror Directory:

<cb>rsync -avE --delete <v>source_dir<>/ <v>target_parent_dir<>/<>

With Identity File:

<cb>rsync -i <v>identity_file_path<> <v>...<><>


Options:

	<c>-a<>				archive (same as -rlptgoD)
	<c>-D<>				Same as --devices --specials
	<c>-E<>				copy extended attributes
	<c>-g<>				preserve groups
	<c>-i<> <v>file<>	login with identity file
	<c>-l<>				copy symlinks as symlinks
	<c>-o<>				preserve owner
	<c>-p<>				preserve permissions
	<c>-r<>				recursive
	<c>-t<>				preserve times
	<c>-v<>				verbose

	<c>-—exclude <v>file<> | <v>wildcard<><>
				 	exclude this/these files (wild cards ok but finicky).

	<c>--delete<>		delete extraneous files.
	<c>--devices<>		preserve device files (super user only).
	<c>--ignore-errors<>	continues copying other files if a file has an error.
	<c>--specials<>		preserve special files.
	<c>--version<>		show current version.
@
@ identity file


### Rsync - To Remote System

<cb>rsync <v>...<> <v>source_dir<>/ <v>user_name<>@<v>host<>:<v>target_dir<>/<>

Mirror Directory:

<cb>rsync -avE --delete <v>source_dir<>/ <v>user_name<>@<v>host<>:<v>target_dir<>/<>

Duplicates the directory <c><v>source_dir<><> on your computer to the directory <c><v>target_dir<><> on the remote system.
It will update and delete files as necessary.
@
@ sync, device



### Rsync - From Remote System

<cb>rsync <v>...<> <v>user_name<>@<v>host<>:<v>source_dir<>/ <v>target_dir<>/<>

Mirror Directory:

<cb>rsync -avE --delete <v>user_name<>@<v>host<>:<v>source_dir<>/ <v>target_dir<>/<>

Duplicates the directory <c><v>source_dir<><> on the remote system to the directory <c><v>target_dir<><> on your local computer.
It will update and delete files as necessary.
@
@ sync, device



### Script - Run

<cb>sh <v>script_file<><l>



### Script - Run in Current Env

<cb>source <v>script_file<><>



### Sleep

<cb>sleep <v>seconds<><>



### SSH

<cb>ssh <v>user_id<>@<v>server_url<><>

<cb>ssh -i <v>server_pem_file<> <v>user_id<>@<v>server_url<><>

Options:

	<c>-v<>				Verbose Mode
	<c>-i <v>pem_file<><>		Use a pem (identity) file.



### SSH - Key - Create Public / Private Key

<cb>ssh-keygen -t rsa -b 4096 -C "<v>user<>@<v>host<>"<>

<c><v>user<><> - Use your local user id.
<c><v>host<><> - Use your local host name.

Creates These By Default:

<cb>$HOME/.ssh/id_rsa
$HOME/.ssh/id_rsa.pub<>


Creates an identity key that can be use to securely identify you on other machines.
Useful for passwordless logins.

Use the user id as <c><v>user<><> and your computer's domain name as <c><v>host<><>.
Accept defaults.
Passphrase not required. Skip by pressing enter.
@
@ ssh-keygen, openssl, passwordless login



### SSH - Key - Send Public Key To Server

<cb>ssh-copy-id "<v>server_user<>@<v>server_host<>"<>

Shares the current user's public identity key with the server.
The server will ask for the server's user id to authenticate.
The server then saves the public key.

Should enable passwordless login.
@
@ ssh-copy-id, passwordless login



### SSH - Setup Passwordless Login

From the client computer:

<card>Create Public / Private SSH Key
(ssh-keygen)

Send Public Key To Server Computer
(ssh-copy-id)

Test
(ssh user@server_ip_address)<>


Allows the client computer to log into the server computer without a password.


Troubleshooting:

Getting errors with: "Matching host key"?
Edit <c>known_hosts<> and remove the offending line.

<cb>vi .ssh/known_hosts<>
@
@ ECDSA error ip key, differs


### su

<cb>su <v>user_id<><>


SU = Substitute User.

Switches to a user's identity or root if no user given.



### sudo

<cb>sudo <v>command<><>

<cb>sudo -u <v>user_id<> <v>command<><>

Run Previous Command Using <c>sudo<>:

<cb>sudo !!<>

<cb>sudo -u <v>user_id<> !!<>


SUDo = Substitute Do.

Executes a command as root or another user.



### System - Info

<cb>vmstat <v>length<> <v>count<><>

System information, free memory, cpu usage for a given length of time.



### System - IO Info

<cb>iostat <v>length<> <v>count<><>

IO information, cpu usage for a given length of time.



### Tar - Untar

<cb>tar xzf <v>file_name<><>

	f	Use filename as input.  2
	x	Extract. 1
	v	Verbose.
	z	Extract through gZip. 1
	-C <v>target_directory<> 	Expand to <c>target_directory<>.

Note: 1 - Needs to be first option. Does not need '-'.
Note: 2 - Needs to be last option.



### Tail

End of File:

<cb>tail <v>file_name<><>
@
@ end, bottom, last



### Tail Continuously

<cb>tail -f <v>file_name<><>
@
@ end, bottom, last



### Tail - Last N Lines

<cb>tail -n <v>lines<> <v>file_name<><>
@
@ end, bottom, last



### Tail - Latest File

<cb>tail -f $(/bin/ls -1t  <v>directory/*<> | /bin/sed q)<>
@
@ end, bottom, last



### Telnet

<cb>telnet <v>server<> [<v>port<>]<>



### Telnet - SSH

See: SSH



### Terminal - Show Settings

stty -a



### Terminal - Set Delete Key

stay erase [backspace] 	// IN this case press the backspace key on the keyboard for the the key you want to be delete (say windows backspace key).



### Terminal - Set Timeout

Add to .bash_profile...

	TMOUT=numSeconds
	export TMOUT



### Time - Measure

time command… 	// Measures how long a command takes to run. Results at the bottom.



### Time - Show

<!>Add tag to Date (above)<>

See: Date - Show



### Time Zone - Get

date

or	date "%Z %z"			// Shows just the time zone.



### Time Zone - Set

For AWS Linux:

	Pick Timezone	/usr/share/zoneinfo/		// Folders with time zones
		/usr/share/zoneinfo/America

			America/New_York	// EST Time Zone
			UTC					// UTC Time Zone

	Update clock file	sudo vi /etc/sysconfig/clock

	Add	ZONE="America/New_York"

	Copy Timezone to Localtime	sudo ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime




### User - Create

<cb>adduser username<>

		-g group 	// Add to group
		-shell shellName	// Set user shell '/usr/bash' | '/usr/false'



### User - Delete

<cb>userdel -r username<>

	-f	// Force even if the user is logged in.
	-r	// Remove user's home directory.



### User - Get Id

<cb>id<>

	-a	// List all groups associated with the id as well.
	-q	// Quite mode.
	-qq	// Even quieter mode.



### User - Group - Set / Change To

<cb>usermod -G groupname username<>



### User - Groups - List

<cb>groups [ username ]<>

	id -Gn 	// Use on OS X where groups has been deprecated.

		-G, --groups	// List all user groups
		-n, —name	// Prints name instead of number.
		-p	// Format for humans.



### User - Info

<cb>id [ username ]<>



### User - Password - Change

<cb>passwd [ username ]<>



### Users - List

<cb>cut -d: -f1 /etc/passwd<>



### User Group - Create

<cb>groupadd groupname a<>



### User Group - Delete

<cb>groupdel groupname<>



### User Groups - List

<cb>cat /etc/group 		// Lists all as defined in /etc/groups<>

cut -d: -f1 /etc/group | sort 		// Better format.

dscacheutil -q group 		// OS X Specific.



### Version - Find

One of the following:

<cb>cat /etc/*-release

lsb_release

cat /proc/version<>



### Web - Download

wget http://url-to-file 	// Will download the web url to the current directory.



### Zip - Compress

<cb>zip -r <v>zip_file<> <v>folder_to_compress<>
zip -r <v>zip_file<> <v>file1<> <v>file2<> <v>...<>
zip -r <v>zip_file<> <v>files<> -x <v>files_to_exclude<><>

Options:

<cb>-P <v>password<><>



### Zip - Unzip

<cb>unzip <v>zip_file<><>

Unzip To Target Directory:

<cb>unzip <v>zip_file<> -d <v>target_directory<><>
@
@ Uncompress



### Zip - View Contents

<cb>zipinfo <v>zip_file<><>



# Exit Codes
@ 
@ status, return


### Exit Code - OK / Successful

OK Exit Code:

<cb>0<>
@
@ 0, successful


### Exit Code - Error

Recommended Error Exit Codes:

<cb>1-127<>


### Exit Code - Error / General Error

<cb>1<>

Return 1 for a general exception.
@
@ 1


### Exit Code - Error / User Error

<cb>2<>

Invalid Command Line Options Error Code

These are guideline more than rule.
@
@ 2



# Reference - System Directories


## Directories - Basics

<card><table><col><c>/etc<><><col>Configuration Files<>
<col><c>/opt<><><col>Server Application Directory<>
<col><c>/usr<><><col>USR = Unix System Resource. Leave Alone<>
<col><c>/usr/local<><><col>Shared Applications, 3rd Party Apps<>
<col><c>/usr/share/zoneinfo<><><col>Server Supported Time Zones.<>
<col><c>/var<><><col>System & System Apps Changeable Data<>
<col><c>/var/run<><><col>Runtime Variable Data, PID files<>
<col> <>
<col><c>/home<><><col>Users Directory<>
<col><c>/home/<v>user_name<><><><col>User Home Directory<>
<col><c>~<><><col>Alias to User Home Directory<><><>



## Directories - Details

/home/userName 	User home directory.


### Directory - /etc

<cb>/etc<>

Configuration files.

(Pronounced: Et See)



### Directory - /etc/init.d

<cb>/etc/init.d<>

Contains scripts for startup daemons.

(Deprecated on some systems (prefer systemd).
@
@ /etc/init.d, etc init.d



### Directory - /etc/.profile.d
Use this to add items to the OS.

<m>(confirm)<>
@
@ /etc/.profile.d, etc .profile.d




### Directory - /opt

<cb>/opt<>

Server application directory (web apps, etc.)



### Directory - /usr

<cb>/usr<>

USR = Unix System Resource. Used by distort packages. Leave alone.



### Directory - /usr/local

<cb>/usr/local<>

Shared applications, 3rd party apps (java, etc.). Install shared apps here.



### Directory - /usr/share/zoneinfo

<cb>/usr/share/zoneinfo<>

Server supported time zones.



### Directory - /var

<cb>/var<>

Directory where the system & system installed apps stores changeable data (web servers, etc).



### Directory - /var/run

<cb>/var/run<>

Runtime Variable Data, PID files.



# Reference - System Files


### File - /etc/groups

<cb>/etc/groups<>

Contains all system groups.
@
@ etc, groups



### File - /etc/profile

<cb>/etc/profile<>

Base installed systemwide initialization file.

May be overwritten by OS updates.
@
@ initialization file, etc, profile



### File - /etc/sysconfig/clock

<cb>/etc/sysconfig/clock<>

Stores the system timezone.
@
@ clock, timezone, sysconfig, etc



# Reference - User Directories


## User Directories - Basics

<card><table><col><c>/home<><><col>Users Directory<>
<col><c>/home/<v>user_name<><><><col>User Home Directory<>
<col> <>
<col><c>~<><><col>Alias to User Home Directory<><><>



## User Directories - Details


### User Directory - Home

<cb>/home/<v>user_home<>



# Reference - User Files


## User Files - Basics

<card><table><col><c>~/.profile<><><col>Bourne Shell Initialization Script<><col><#>(Deprecated)<><>
<col><c>~/.bash_profile<><><col>Bash User Login Script<><col>(Login)<>
<col><c>~/.bashrc<><><col>Bash User Per-interactive-shell Startup Script<><col>("interactive", "non-login" shells only)<>
<col><c>~/.bash_logout<><><col>Bash User Logout Cleanup Script<>
<col><c>~/.inputrc<><><col>Bash User Readline Initialization Script<><><>



## User Files - Details


### File - ~/.profile

<cb>~/.profile<>

(Deprecated) Bourne Shell initialization file.

Executed at login time. Bash will read this if found.
@
@ .profile



### File - ~/.bash_profile

<cb>~/.bash_profile<>

Bash user initialization script file.

Executed at login time.
@
@ .bash_profile



### File - ~/.bashrc

<cb>~/.bashrc<>

Bash user per-interactive-shell startup file.

Executed by "interactive" and "non-login" shells only.
@
@ .bashrc



### File - ~/.bash_logout

<cb>~/.bash_logout<>

Bash user logout cleanup script.
@
@ .bash_logout



### File - ~/.inputrc

<cb>~/.inputrc<>

Bash user readline initialization script file.
@
@ .inputrc



### File - "Login" Shell Config Files

<cb>.login, .profile, .zlogin<>

Executed when logging in from another host.
Executed when opening a text console.
@
@ .login, .profile, .zlogin



### File - "Interactive" Shell Config Files

<cb>.bashrc, .tcshrc, .zschrc...<>

Executed by shells connected to terminals or pseudo-terminals.
@
@ .bashrc, .tcshrc, .zschrc


# Reference - Application Directories, Files


### Application - Global Configuration

<card><table><col><c>/etc/<v>app_name<><><>
<col><c>/usr/share/<v>app_name<><><><col>Read Only, Independent of Machine<>
<col><c>/usr/lib/<v>app_name<><><><col>Read Only, Machine Specific<>
<col><c>/var/lib/<v>app_name<><><><col>Read / Write<><><>



### Application - User Configuration / User Data

<card><table><col><c>/home/<v>user_name<>/.config/<><>
<col><c>/home/<v>user_name<>/.config/<v>app_name<><><><><>



# Glossary


## Acronyms


### RC
Run Command


## Terms


### APT
Avanced Package Tool


### Daemon
A program that runs in the background.

This is generally a system wide service with only one running instance. Traditionally daemon names end with the letter d. Typically the init process is the part of daemons.


### init.d - Run Level
An integer that states the server state/configuration/level.

Run levels include Halt, Single User Mode, Multiuse Mode, Multiuse GUI Mode, Reboot. Numbers run from most simple level to most complex run mode. May be different for different flavours of Linux. Service startup/execution is tied to its run level to match the correct server state.


### init.d - RC Script
A script responsible for starting and stoping a service.

Must be placed in /etc/init or etc/rc.d/init.d folders.
Must take commands start, stop, restart, status.


### Service
An application that runs in the background waiting to be used or carries out essential tasks.


