# Linux Commands


# Files

### Permission Notation

<cb>drwxrwxrwx+<>

<c>d ... ... ...<>	Directory
<c>. rwx ... ...<>	Owner
<c>. ... rwx ...<>	Group
<c>. ... ... rwx<>	Everyone
<c>. ... ... ... +<>	Additional Permissions

r	Read
w	Write
x	Execute



### File Mode Notation

<cb><v>uga<><>

<c><v>u<><>	User Value
<c><v>g<><>	Group Value
<c><v>a<><>	All Value

1	Execute
2	Write
4	Read


Example:

<card>User	Read, Write, Execute	7
Group	Read, Execute		5
All		Read Only			4<>

Mode:

<cb>754<>


Example:

<card>User	Read, Execute			5
Group	Read, Execute		5
All		No Access			0<>

Mode:

<cb>550<>



# Cron
@
@ App


## Cron - Commands


### Cron - Jobs - List All

<cb>crontab -l<>



### Cron - Jobs - Edit Existing Jobs

<cb>crontab -e<>



### Cron - Jobs - Remove

<cb>crontab -r<>



### Cron - Schedule Job

<cb>crontab <v>cron_job_file<><>

Schedule jobs in cron from cron job settings file.



## Cron - Job File Format

Each line refers to one job. Add as many lines to the file as you need to schedule your jobs.

Line Format:

<cb><v>min<> <v>hour<> <v>day<> <v>month<> <v>day_of_week<> <v>shell_command<><>

<c>min<>				<c><s>[<> 0 - 59 <s>|<> * <s>]<><>
<c>hour<>			<c><s>[<> 0 - 23 <s>|<> * <s>]<><>
<c>day<>				<c><s>[<> 1 - 31 <s>|<> * <s>]<><>
<c>month<>			<c><s>[<> 1 - 12 <s>|<> * <s>]<><>
<c>day_of_week<>		<c><s>[<> 0 - 6  <s>|<> * <s>]<><>		0 = Sunday

<c><v>shell_command<><>	The Command to Execute

<c>*<>				All Times (* is a wild card)


<b><m>Check and Format:<><>


Item Time Format	Second Minute Hour Day-of-Month Month Day-of-Week

	Each: Can be number, number range, number list, wild card
	Each: Number:	5
	Each: Number range:	2-5
	Each: Number list:	2,3,7
	Each: Wild card (all):	*
	Each: Unknown (day of week, etc.):	?			// Not supported by all cron implementations.

	Day of Month:		1-31
	Day of Week:		0-6 or SUN-SAT
					L (last of month)			// Ex: 6L	Last Friday of month
		# (specifies which week of month)	// Ex: 6#2	2nd Friday of every month

Logging Response

	To Null				??
	To Log File			&> /tmp/logs/cron.logs 

Example:

0 17 * * 5 somescript.sh		Runs somescript.sh at 5 PM every Friday.
1 0/2 * * * somescript.sh		Runs somescript.sh every 2 hours starting at 1 minute past midnight every night.



## Cron - How To


### Cron Service - Test If Up

<cb>ps -ef | grep cron | grep -v grep<>



### Cron - Files And Directories

Log Directories:

<cb>/var/log/cron<>

<cb>/var/log/syslog<>


<c>/var/log/cron<>		Directory for cron logs (true for AWS Linux).

<c>/var/log/syslog<>		May be a file.



# Services / init.d / rc
@
@ initd



### init.d - Service - Start

<cb>/etc/init.d/<v>script_name<> start<>

<cb>/etc/rc.d/init.d/<v>script_name<> start<>

Directory depends on OS (not standardized).



### init.d - Service - Stop

<cb>/etc/init.d/<v>script_name<> stop<>

<cb>/etc/rc.d/init.d/<v>script_name<> stop<>

Directory depends on OS (not standardized).



### init.d - Service - Add

Add Service Script to init.d Directory <^><#>1<><>:

<cb>/etc/init.d/<v>service_name<><>

<cb>/etc/rc.d/init.d/<v>service_name<><>

Add To init.d Service:

<cb>chkconfig --add <v>service_name<><>

1 - Directory depends on OS (not standardized).

<m>Is this right?
See: init.d - Service Script - Create / Add (below)<>

<m>What does <c>chkconfig --add <v>service_name<><> do?<>
@
@ chkconfig --add, TODO



### init.d - Service - Run Once at Startup

Add To:

<cb>/etc/rc.d/rc.local/<>



### init.d - Service - View

<cb>chkconfig --list <v>service_name<><>
@
@ chkconfig --list



### init.d - Services - List

<cb>chkconfig --list<>
@
@ chkconfig --list



### init.d - Server Reboot

<cb>sudo init 6<>
@
@ init 6



### init.d - Service Script - Create / Add

Format:

<card>Bash Script (typically)<>

Location:

<cb>/etc/rc.d/init.d<>

Add Startup Link<^><#>1<><>:

<cb>/etc/rc.d/rc2.d/S<v>99<><v>service_name<><>

or

<cb>/etc/rc.d/rc3.d/S<v>99<><v>service_name<><>


Add Shutdown Link (Both Directories):

<cb>/etc/rc.d/rc0.d/K<v>99<><v>service_name<><>

<cb>/etc/rc.d/rc6.d/K<v>99<><v>service_name<><>


<b>Requirements:<>

<*>Must Have <c># chkconfig<> Line
Startup Script Must Start Service with <!>NON-root<> ID
Startup Script Must Support Actions (start, stop, restart, status)<>


1 - File name should start with S<v>99<>. Determins startup order.

1 - The directory is OS dependent.



### init.d - Service Script - chkconfig Line

chkconfig Line:

<cb># chkconfig: <v>run_levels<> <v>start_order<> <v>kill_order<><>

Example:

<cb># chkconfig: 2345 40 80<>



### init.d - Service Script - Supported Commands

Usage<^><#>1<><>:

<cb><v>service_name<> <v>command<><>

command:

<cb>start | stop | restart | status<>


The startup script must support these 4 commands.

See: sample script



### init.d - Service Script - Startup Link

Create Startup Link<^><#>1<><>:

<cb>.../rc2.d/S<v>99<><v>service_name<><>

<cb>.../rc3.d/S<v>99<><v>service_name<><>


Link Name Format (required):

<cb>S<v>99<><v>service_name<><>

<card><table><col><c>S<><><col>Start<>
<col><c><v>99<><><><col>Start Order<>
<col><c><v>service_name<><><><col>Must Match Original Script Name (in init.d directory)<><><>


1 - OS Dependent


Example:

<card>sudo ln -s /etc/rc.d/init.d/service_1  /etc/rc.d/rc3.d/S91service_1<>



### init.d - Service Script - Shutdown Link

Create Shutdown Link (Both Directories):

<cb>.../rc0.d/K<v>99<><v>service_name<><>

<cb>.../rc6.d/K<v>99<><v>service_name<><>


Link Name Format (required):

<cb>K<v>99<><v>service_name<><>

<card><table><col><c>K<><><col>Start<>
<col><c><v>99<><><><col>Kill Order<>
<col><c><v>service_name<><><><col>Must Match Original Script Name (in init.d directory)<><><>


Example:

<card>sudo ln -s /etc/rc.d/init.d/service_1  /etc/rc.d/rc0.d/K91service_1<>



### init.d - Service Script - Sample

<cb>#!/bin/bash
<#># chkconfig: 2345 20 80
\# description: Description comes here....<>

<#># Source function library.<>
. /etc/init.d/functions

start() {
	<#># code to start app comes here 
	# eg: daemon program_name &
	# eg: su service_user_id -C path_to_script > path_to_log &<>

}

stop() {
	<#># code to stop app comes here 
	# eg: killproc program_name
	# eg: killproc -p pid_file program_name
	# eg: pkill -if 'app_regex_expression'<>
}

status() {
	<#># code to check status of app comes here<>
}

case "<v>$1<>" in 
	start)
		start
		;;
	stop)
		stop
		;;
	restart)
		stop
		start
		;;
	status)
		status
		;;
	*)
		echo "Usage: $0 {start|stop|status|restart}"
esac

exit 0<>


### init.d - Directories

<card><table><col><c>/etc/init<>		<><col>?<>
<col> <>
<col><c>/etc/init.d<><><col>Files to be run by init.
Often symbolically linked to a file in the rc.d directory.
(/etc/rc.d/init.d)<>
<col> <>
<col><c>/etc/rc.d<><><col>Run Commands (Startup Scripts)<>
<col> <>
<col><c>/etc/rc.d/init.d<><><col>Location of actual startup scripts<>
<col> <>
<col><c>/etc/rc.d/rcN.d<><><col>Location of run level script where N = the run level (0 - 6)
Contains links to the actual scripts in /etc/rc.d/init.d<><><>



### init.d - Files

<card><table><col><c>/etc/inittab<><><col>Controls service configurations
Change default run levels here.
May be moved / not used.<>
<col> <>
<col><c>/etc/rc.local<><><col>Run once after all other scripts but before any login prompts.
Put local setup commands in here.

Often symbolically linked to a file in the rc.d directory.
-> /ect/rc.d/rc.local<>
<col> <>
<col><c>/etc/init/rcS.conf<><><col>System initialization script
Instead of /etc/inittab<>
<col> <>
<col><c>/etc/init/rc.conf<><><col>Individual Run Levels<>
<col> <>
<col><c>/etc/init.d/functions<><><col>Common init.d Functions<><><>

<card><table><col><c>K<v>99script_name<><>		<><col>Kill script link. Links to the original script in init.d.

K = Kill

<v>99<> = Start Order

<v>script_name<> is the original script name.

Script links starting with K will be ordered to stop.

Located in /etc/rc.d/rc<v>N<>.d directories (typically rc0.d and rc6.d)<>
<col> <>
<col><c>S<v>99script_name<><><><col>Start script link. Links to the original script in init.d.

S = Start

<v>99<> = Start Order

<v>script_name<> is the original script name.

Script links starting with S will be ordered to start.

Located in /etc/rc.d/rc<v>N<>.d directories (typically rc2.d, rc3.d)<><><>


<c>K<v>99script_name<><> Example:

<cb>/etc/rc.d/rc0.d/K81apachewebserver<>


<c>S<v>99script_name<><> Example:

<cb>/etc/rc.d/rc3.d/S79apachewebserver<>



### init.d - Run Levels

These are not standardized.

<card><table><col>1, 2		<><col>For System Problems<>
<col>2<><col>Default Debian Non-GUI Mode<>
<col>4, 5<><col>GUI / Interactive Text Modes<>
<col>0, 6<><col>Never (used when system is starting or rebooting)<><><>



### init.d - Run Levels / Redhat 6, Amazon Linux

<card><table><col>0		<><col>Halt (Do NOT set the init default to this)<>
<col>1<><col>Single User Mode<>
<col>2<><col>Multiuser, Without NFS (same as 3 but no network)<>
<col>3<><col>Full Multiuser Mode<>
<col>4<><col>Unused<>
<col>5<><col>X11<>
<col>6<><col>Reboot (Do NOT set the init default to this)<><><>



### init.d - Run Level - Start

<card><table><col>Debian<><col>2<>
<col>Redhat, Amazon Linux, Typical (?)<><col>3<><><>



### init.d - Run Level - Reboot

<card><table><col>0, 6		<><col>Kill scripts in <c>rc0.d<>, <c>rc6.d<><><><>



### init.d - Used By

<card>Amazon Linux
Redhat<>
@
@ redhat, amazon linux



# Services / systemd

<m>How to add service to systemd?<>

<m>How to start under non-root id?<>

<m>How to properly capture output (log files)?<>

<m>How to handle startup order?<>

<m>How to restart a service?<>
@
@ system.d, systemd-only



### systemd - Service - Start

<cb>systemctl start <v>service_name<><>
@
@ systemctl start



### systemd - Service - Stop

<cb>systemctl stop <v>service_name<><>
@
@ systemctl stop serviceName



### systemd - Service - Enable Start on Boot

<cb>systemctl enable <v>service_name<><>
@
@ systemctl enable



### systemd - Service - Check Status

<cb>systemctl status <v>service_name<><>
@
@ systemctl status


### systemd - Services - List All

<cb>systemctl<>
@
@ systemctl



### systemd - Services - Relead

<cb>systemctl daemon-reload<>
@
@ systemctl daemon-reload



### systemd - systemd Statuses

<cb>Enabled
Static
Disabled<>

<m>(what are these? how are they used?)<>
@
@ enabled, static, disabled.



### systemd - Logs - Check

<cb>journalctl -u <v>service_name<>.<v>service<><>
@
@ journalctl -u



### systemd - Troublshooting - "Bad Message"

Usually implies invalid syntax.



### systemd - Configuration Directory / Files

<cb>/etc/systemd/system<>



### systemd - File - Unit File

A text file that contains information for a service.

Format: ini file



# How To / Commands



### Cron - Jobs - Add / Edit

<cb>crontab -e<>

Then:

<card>Opens file in editor.
Add / Update / Comment Out
Save changes.<>



### Command-line Shell - Which One?

<cb>echo $0<>

Shows which command-line shell you are using.

Run from the command prompt.
Will not work inside scripts.
@
@ commandline, bash, zsch, sh, terminal



# Exit Codes
@ 
@ status, return


### Exit Code - OK / Successful

OK Exit Code:

<cb>0<>
@
@ 0, successful


### Exit Code - Error

Recommended Error Exit Codes:

<cb>1-127<>


### Exit Code - Error / General Error

<cb>1<>

Return 1 for a general exception.
@
@ 1


### Exit Code - Error / User Error

<cb>2<>

Invalid Command Line Options Error Code

These are guideline more than rule.
@
@ 2



# Reference - System Directories


## Directories - Basics

<card><table><col><c>/dev<><><col>Devices<>
<col><c>/etc<><><col>Configuration Files<>
<col><c>/home<><><col>Users Directory<>
<col><c>/opt<><><col>Server Application Directory<>
<col><c>/proc<><><col>System Processes<>
<col><c>/sys<><><col>Kernel Information<>
<col><c>/usr<><><col>USR = Unix System Resource. Leave Alone<>
<col><c>/usr/local<><><col>Shared Applications, 3rd Party Apps<>
<col><c>/usr/share/zoneinfo<><><col>Server Supported Time Zones.<>
<col><c>/var<><><col>System & System Apps Changeable Data<>
<col><c>/var/run<><><col>Runtime Variable Data, PID files<>
<col> <>
<col><c>/home<><><col>Users Directory<>
<col><c>/home/<v>user_name<><><><col>User Home Directory<>
<col><c>~<><><col>Alias to User Home Directory<><><>



## Directories - Details

/home/userName 	User home directory.



### Directory - /dev

<cb>/dev<>

Devices.

All devices are accessible from the file system and mounted under this directory.



### Directory - /etc

<cb>/etc<>

Configuration files.

(Pronounced: Et See)



### Directory - /etc/init.d

<cb>/etc/init.d<>

Contains scripts for startup daemons.

(Deprecated on some systems (prefer systemd).
@
@ /etc/init.d, etc init.d



### Directory - /etc/.profile.d
Use this to add items to the OS.

<m>(confirm)<>
@
@ /etc/.profile.d, etc .profile.d



### Directory - /etc/ssh

<cb>/etc/ssh<>

Stores ssh configuration information.

Contains public and private keys.
@
@ public private keys



### Directory - /home

<cb>/home<>

User data directory.

Each user has a subdirectory dedicated to them under <c>/home<>.



### Directory - /opt

<cb>/opt<>

Server application directory (web apps, etc.).



### Directory - /proc

<cb>/proc<>

Provides information on running processes.



### Directory - /sys

<cb>/sys<>

Provides information on the kernel.



### Directory - /usr

<cb>/usr<>

USR = Unix System Resource. Used by distort packages. Leave alone.



### Directory - /usr/local

<cb>/usr/local<>

Shared applications, 3rd party apps (java, etc.). Install shared apps here.



### Directory - /usr/share/zoneinfo

<cb>/usr/share/zoneinfo<>

Server supported time zones.



### Directory - /var

<cb>/var<>

Variable Data

Directory where the system & system installed apps stores changeable data (web servers, etc).



### Directory - /var/apt

<cb>/var/apt<>

Logs for all items installed or updated on the system.



### Directory - /var/run

<cb>/var/run<>

Runtime Variable Data, PID files.



# Reference - System Files


### File - /etc/hostname

<cb>/etc/hostname<>

The computer name.
@
@ computer name



### File - /etc/groups

<cb>/etc/groups<>

Contains all system groups.
@
@ etc, user groups



### File - /etc/machine-id

<cb>/etc/machine-id<>

The computer id.
@
@ computer id



### File - /etc/passwd

<cb>/etc/passwd<>

Stores all system and user ids.

Includes user name, user id, startup directory.
@
@ system ids, user id, users



### File - /etc/profile

<cb>/etc/profile<>

Base installed systemwide initialization file.

May be overwritten by OS updates.
@
@ initialization file, etc, profile



### File - /etc/sysconfig/clock

<cb>/etc/sysconfig/clock<>

Stores the system timezone.
@
@ clock, timezone, sysconfig, etc



### File - /proc/cpuinfo

<cb>/proc/cpuinfo<>

Shows all cpu information.



### File - /proc/meminfo

<cb>/proc/meminfo<>

Shows all memory information.



# Reference - User Directories


## User Directories - Basics

<card><table><col><c>/home<><><col>Users Directory<>
<col><c>/home/<v>user_name<><><><col>User Home Directory<>
<col> <>
<col><c>~<><><col>Alias to User Home Directory<><><>



## User Directories - Details


### User Directory - Home

<cb>/home/<v>user_home<>



# Reference - User Files


## User Files - Basics

<card><table><col><c>~/.profile<><><col>Bourne Shell Initialization Script<><col><#>(Deprecated)<><>
<col><c>~/.bash_profile<><><col>Bash User Login Script<><col>(Login)<>
<col><c>~/.bashrc<><><col>Bash User Per-interactive-shell Startup Script<><col>("interactive", "non-login" shells only)<>
<col><c>~/.bash_logout<><><col>Bash User Logout Cleanup Script<>
<col><c>~/.inputrc<><><col>Bash User Readline Initialization Script<><><>



## User Files - Details


### File - ~/.profile

<cb>~/.profile<>

(Deprecated) Bourne Shell initialization file.

Executed at login time. Bash will read this if found.
@
@ .profile



### File - ~/.bash_profile

<cb>~/.bash_profile<>

Bash user initialization script file.

Executed at login time.
@
@ .bash_profile



### File - ~/.bashrc

<cb>~/.bashrc<>

Bash user per-interactive-shell startup file.

Executed by "interactive" and "non-login" shells only.
@
@ .bashrc



### File - ~/.bash_logout

<cb>~/.bash_logout<>

Bash user logout cleanup script.
@
@ .bash_logout



### File - ~/.inputrc

<cb>~/.inputrc<>

Bash user readline initialization script file.
@
@ .inputrc



### File - "Login" Shell Config Files

<cb>.login, .profile, .zlogin<>

Executed when logging in from another host.
Executed when opening a text console.
@
@ .login, .profile, .zlogin



### File - "Interactive" Shell Config Files

<cb>.bashrc, .tcshrc, .zschrc...<>

Executed by shells connected to terminals or pseudo-terminals.
@
@ .bashrc, .tcshrc, .zschrc


# Reference - Application Directories, Files


### Application - Global Configuration

<card><table><col><c>/etc/<v>app_name<><><>
<col><c>/usr/share/<v>app_name<><><><col>Read Only, Independent of Machine<>
<col><c>/usr/lib/<v>app_name<><><><col>Read Only, Machine Specific<>
<col><c>/var/lib/<v>app_name<><><><col>Read / Write<><><>



### Application - User Configuration / User Data

<card><table><col><c>/home/<v>user_name<>/.config/<><>
<col><c>/home/<v>user_name<>/.config/<v>app_name<><><><><>



# Utilities


### System - List CPU, Memory, Swap, Top Processes

<cb>htop<>


Lists all in real time.

htop is a full screen terminal app.
May need to be installed.



# Glossary


## Acronyms


### RC
Run Command


### SCP
Secure Copy Protocol


### SH
Shell


### SSH
Secure Shell


### SSL
Secure Socket Layer


### TSL
Transport Layer Security



## Terms


### APT
Avanced Package Tool


### Daemon
A program that runs in the background.

This is generally a system wide service with only one running instance. Traditionally daemon names end with the letter d. Typically the init process is the part of daemons.


### init.d - Run Level
An integer that states the server state/configuration/level.

Run levels include Halt, Single User Mode, Multiuse Mode, Multiuse GUI Mode, Reboot. Numbers run from most simple level to most complex run mode. May be different for different flavours of Linux. Service startup/execution is tied to its run level to match the correct server state.


### init.d - RC Script
A script responsible for starting and stoping a service.

Must be placed in /etc/init or etc/rc.d/init.d folders.
Must take commands start, stop, restart, status.


### Service
An application that runs in the background waiting to be used or carries out essential tasks.


